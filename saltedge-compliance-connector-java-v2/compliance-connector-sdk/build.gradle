plugins {
    id 'java'
    id 'java-library'
    id 'org.springframework.boot' version '2.7.18'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
    id 'maven-publish'
    id 'signing'
}

group 'com.saltedge.connector.sdk'
version '2.12.6'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

java {
    withJavadocJar()
    withSourcesJar()
}

repositories {
    mavenCentral()
}

dependencies {
    def springVersion = '2.7.18'
    implementation 'org.jetbrains:annotations:24.1.0'
    implementation "org.springframework.boot:spring-boot-starter:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-web:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:$springVersion"
    implementation "org.springframework.boot:spring-boot-starter-validation:$springVersion"

    def jjwtVersion = '0.12.6'
    implementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:$jjwtVersion", "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
    implementation "io.jsonwebtoken:jjwt-impl:$jjwtVersion"
    implementation "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"

    testImplementation "io.jsonwebtoken:jjwt-api:$jjwtVersion"
    testImplementation "io.jsonwebtoken:jjwt-jackson:$jjwtVersion"
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.2'
    testImplementation "org.springframework.boot:spring-boot-starter-test:$springVersion"
    testImplementation "org.xmlunit:xmlunit-core:2.10.0" // FIX GHSA-chfm-68vv-pvw5
    testImplementation 'com.h2database:h2:2.3.232'
}

test {
    useJUnitPlatform()
}

tasks.test {
    useJUnitPlatform()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'compliance-connector-sdk'
            from components.getByName('java')
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Salt Edge Compliance Connector Java SDK'
                description = 'Salt Edge Compliance Connector Java SDK (BG)'
                url = 'https://github.com/saltedge/compliance-examples/tree/master/saltedge-compliance-connector-java-v2/compliance-connector-sdk'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'https://raw.githubusercontent.com/saltedge/compliance-examples/master/saltedge-compliance-connector-java-v2/LICENSE.txt'
                    }
                }
                developers {
                    developer {
                        id = 'constantink'
                        name = 'Constantin Chelban'
                        email = 'constantink@saltedge.com'
                    }
                }
                scm {
                    connection = 'scm:https://github.com/saltedge/compliance-examples.git'
                    developerConnection = 'scm:https://github.com/saltedge/compliance-examples.git'
                    url = 'https://github.com/saltedge/compliance-examples/tree/master/saltedge-compliance-connector-java-v2/compliance-connector-sdk'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'sonatype'
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username = project.properties["ossrhUsername"].toString()
                password = project.properties["ossrhPassword"].toString()
            }
        }
        maven {
            name = 'localOutput'
            url = "${rootDir}/../out_${compileJava.sourceCompatibility}"
        }
    }
}

signing {
    sign publishing.publications
}


javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

jar {
//    enabled = true
    archiveClassifier = '' //use empty string
}